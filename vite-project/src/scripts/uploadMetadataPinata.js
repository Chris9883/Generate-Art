import axios from "axios";

const PINATA_API_SECRET = import.meta.env.VITE_PINATA_API_SECRET;
const PINATA_API_KEY = import.meta.env.VITE_PINATA_API_KEY;

// pinata makes content available with content url
// "https://gateway.pinata.cloud/ipfs/" + response.data.IpfsHash

export default async function uploadMetadataPinata(
  setMintingStage,
  setMetadataLink,
  name,
  description,
  imageURI,
  connectedAddress,
  traitTypes,
  traitValues
) {
  setMintingStage("uploadingMetadata");
  if (name == "" || imageURI == "" || connectedAddress == "") {
    throw new Error("Missing argument");
  }
  let metadata;
  if (traitTypes.length == 0) {
    metadata = { "generated by": "DALL-E 2" };
  } else {
    metadata = { "generated by": "DALL-E 2", attributes: [] };
    for (let i = 0; i < traitTypes.length; i++) {
      if (traitValues[i]) {
        let traitType = traitTypes[i];
        let value = traitValues[i];
        metadata.attributes.push({ trait_type: traitType, value: value });
      }
    }
  }
  metadata.name = name;
  if (description != "") {
    metadata.description = description;
  }
  metadata.image = imageURI;
  metadata.creator = connectedAddress;

  try {
    const res = await axios.post(
      "https://api.pinata.cloud/pinning/pinJSONToIPFS",
      metadata,
      {
        headers: {
          "Content-Type": "application/json",
          pinata_api_key: PINATA_API_KEY,
          pinata_secret_api_key: PINATA_API_SECRET,
        },
      }
    );
    setMetadataLink(`https://gateway.pinata.cloud/ipfs/${res.data.IpfsHash}`);
    return res.data.IpfsHash;
  } catch (error) {
    setMintingStage("uploadFailed");
    if (error.message.includes("server")) {
      console.error("Pinata Server Error");
    } else {
      console.error(error);
    }
  }
}
